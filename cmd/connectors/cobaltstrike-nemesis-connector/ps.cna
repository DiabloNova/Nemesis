# Always keep 4 and 34 enabled - they'll help catch common developer mistakes
debug(debug() | 4);     # 4  =	display a runtime warning for the first time use of non-declared variables.
#debug(debug() | 8);    # 8  =  DEBUGGING: trace all function calls
debug(debug() | 34);    # 34 = "throw" all errors flagged for use with &checkError
#debug(debug() | 64);   # 64 =	DEBUGGING: trace all predicate decisions (follow program logic)

# TODO: not quite sure what this is...
global('$ps::CachedOutput');

beacon_command_register(
    "nps",
    "Shows, colors, and describes a list of processes using Nemesis (alternative process listing)",
    "Use:\n" .
    "    nps [-s <sort>] [regex]\n" .
    "    nps -d [regex]\n" .
    "Arguments:\n" .
    "   -s <sort>        Sort by a field. Possible sort fields are name, ppid, pid, arch, user, and session.\n" .
    "   regex            Filter results using a regex\n" .
    "Shows and colors a list of processes.\n" .
    "Color Key:\n" .
    "    \c4RED\o          - Security products.\n" .
    "    \cBLIGHT BLUE\o   - Remote administration/access tools.\n" .
    "    \c3GREEN\o        - Browsers.\n" .
    "    \cATURQUOISE\o    - Infrastructure\n" .
    "    \c6PURPLE\o       - Miscellaneous \"you should be aware of this\" processes.\n" .
    "    \UUNDERLINED\o   - Active beacon in the process(a callback in the last " . %nemesis::Settings['BeaconUnderlineThreshold'] . " minutes)"
);

alias nps {
    local('$term $sort $1 $2 $3 $4 $describe');
    $sort = "pid";
    $describe = true;

    if($2) {
        if($2 eq "-s") {
            if($3) {
                $sort = $3;

                if($4) {
                    $term = ".*" . $4 . ".*";
                } else {
                    $term = ".*";
                }

            } else {
                berror($1, "No sort field specified");
                return;
            }
        } else {
            $sort = "name";
            $term = ".*" . $2 . ".*";
        }
    } else {
        $term = ".*";
    }


    bps($1, lambda({
                $ps::CachedOutput = $2;
                ps::process_list_callback($1, $2, $time, $searchTerm, $sortField, $describe, "");
            },
            $time => ticks(),
            $searchTerm => $term,
            $sortField => $sort,
            $describe => $describe
        )
    );
}


sub ps::process_list_callback {
    local('$BID $sortField $windowSizeStr $binfo $beacons @hostBeaconPids $outputText $time $searchTerm $matched $describe $b');
    local('$description $category $MessageID $retries $num_results $results');
    local('$out $temp $name $ppid $pid $arch $user $session @Processes');
    local('$result $parentProcessId $parentProcessId $parentProcessId $color $parentProcessId $processId $Underline $outputLine $legend');

    $BID = $1;
    $binfo = binfo($BID);
    $outputText = $2;
    $time = $3;
    $searchTerm = $4;
    $sortField = $5;
    $describe = $6;
    $category = $7;

    $beacons = beacons();
    foreach $b (beacons()) {
        if($b['computer'] eq $binfo['computer']) {
            # If the beacon has been active in the last X minutes or is the current beacon, add it
            if((($b['last'] / 60000) lt %nemesis::Settings['BeaconUnderlineThreshold']) || ($b['pid'] eq $binfo['pid']))  {
                push(@hostBeaconPids, $b['pid']);
            }
        }
    }

    @Processes = @();

    # Step 1 - extract all of the raw process data from the output
    foreach $temp (split("\n", ["$outputText" trim])) {
        ($name, $ppid, $pid, $arch, $user, $session) = split("\t", $temp);
        push(@Processes, %(
            name => $name,
            command_line => $null,
            file_name => $null,
            memory => $null,
            process_id => $pid,
            parent_process_id => $ppid,
            start_time => $null,
            arch => $arch,
            token => %(
                user => %(
                    name => $user;
                );
                session => $session;)
            )
        );
    }

    # Step 2 - post the process data to Nemesis and extract the message ID
    # We can't list processes remotely natively in beacon, so no $Source here
    #   http::PostData($BID, $Datatype, $Data, $TimeStamp, $Operation, $Source)
    #     '' for timestamp defaults to the current time
    $MessageID = http::PostData($BID, "process", @Processes, "", "list");
    logger::WriteVerbose("ps::process_list_callback() MessageID: ". $MessageID);

    if($describe) {
        $out .=    "  PID   PPID  Name                         Arch  Session     User                                Description\n";
        $out .= "\cE  ---   ----  ----                         ----  -------     -----                               -----------\n";
    } else {
        $out .=    "  PID   PPID  Name                         Arch  Session     User\n";
        $out .= "\cE  ---   ----  ----                         ----  -------     -----\n";
    }

    if($MessageID) {

        # Step 3 - poll Elasticsearch until entries with this $MessageID appear
        #   This indicates that the process data made it through the Nemesis pipeline
        $retries = 10;
        $num_results = 0;
        while(($num_results lt 1) && ($retries gt 0)) {
            sleep(1000);
            $results = http::GetProcessData($MessageID);
            try {
                if("hits" in $results) {
                    if("total" in $results["hits"]) {
                        $num_results = $results["hits"]["total"]["value"];
                    }
                    else {
                        $num_results = 0;
                    }
                }
                else {
                    $num_results = 0;
                }
            }
            catch $message {
                $num_results = 0;
            }
            $retries = $retries - 1;
        }

        if($results) {
            foreach $result ($results["hits"]["hits"]) {
                $result = $result["_source"];
                $parentProcessId = $result["parentProcessId"];
                $processId = $result["processId"];
                $name = $result["name"];
                $arch = $result["arch"];
                $category = $result["category"]["category"];
                $description = $result["category"]["description"];
                $session = $result["token"]["user"]["session"];
                $user = $result["token"]["user"]["name"];

                if($category eq "Security") {
                    $color = "\c4";				# highlight security products processes in RED.
                }
                else if($category eq "AccessTool") {
                    $color = "\cB";				# highlight remote administration tools in LIGHT BLUE
                }
                else if($category eq "Browser") {
                    $color = "\c3";				# highlight browsers processes in GREEN
                }
                else if($category eq "Infrastructure") {
                    $color = "\c7";             # YELLOW
                }
                else if($category eq "MiscAwareness") {
                    $color = "\c6";				# General "be aware of" processes in PURPLE: indicate the user is not active or you may have crashed an application.
                }
                else {
                    $color =  "";
                }

                $Underline = "";

                if($describe) {
                    $outputLine = "$Underline $color $[5]processId $[5]parentProcessId $[28]name $[5]arch $[11]session $[35]user $description $Underline\o";
                } else {
                    $outputLine = "$Underline $color $[5]processId $[5]parentProcessId $[28]name $[5]arch $[11]session $user $Underline\o";
                }

                $out .= "$outputLine \n";
            }

            if($describe) {
                $windowSizeStr = "                                                                                                                                                                ";
            }

            $legend = "\LEGEND\n";
            $legend .= "\c4    Security Product\n";
            $legend .= "\cB    Access Tool\n";
            $legend .= "\c3    Browser\n";
            $legend .= "\c7    Infrastructure\n";
            $legend .= "\c6    Misc Process to be Aware of\n";

            blog($1, "Nemesis-enriched process listing for $binfo['computer'] BeaconID: $BID\n$windowSizeStr\n$out\n");
            blog($1, $legend);
        }
    }
    else {
        foreach $Process (@Processes) {
            $Underline = "";
            $processId = $Process["process_id"];
            $parentProcessId = $Process["parent_process_id"];
            $name = $Process["name"];
            $arch = $Process["arch"];
            $session = $Process["token"]["session"];
            $user = $Process["token"]["user"]["name"];
            $out .= "$Underline $color $[5]processId $[5]parentProcessId $[28]name $[5]arch $[11]session $user $Underline\o\n";
        }

        blog($1, "Process listing for $binfo['computer'] BeaconID: $BID\n$windowSizeStr\n$out\n");
        berror($1, "No MessageID returned by Nemesis- system either not up or not working properly.")
    }
}
